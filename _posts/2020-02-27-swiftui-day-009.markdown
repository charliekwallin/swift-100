---
layout: post
title:  "Day 9: Intro to App Dev Chapter 10 - Functions"
date:   2020-02-27 06:39:48 -0500
categories: swiftui
---

## More Functions

Chapter 10 in the _Intro_ book finally gets a little more interesting and delves deeper into functions. When putting together the class, I need to figure out how to keep the students interested during chapters 1 - 6. Chapter 7 with Boogie Bot was fun and I understand why it is there, but those chapters are pretty light. On the other hand, the chapter on functions _100 Days_ videos is too complete if you are just beginning. Here are some more notes on functions

### Returning values

```swift
func makeFavorite(categoryOfThing: String, favorite: String) -> String {
    
    return "My favorite \(categoryOfThing) is \(favorite)"
}

let sentence = makeFavorite(categoryOfThing: "food", favorite: "oats")
print(sentence)
```

### Passing variables instead of literals

```swift
func makeFavorite(categoryOfThing: String, favorite: String) -> String {
    
    return "My favorite \(categoryOfThing) is \(favorite)"
}

let categories: String = "band"
let itemInCategory: String = "The Replacements"

let sentence = makeFavorite(categoryOfThing: categories, favorite: itemInCategory)
print(sentence)
```

### Using string interpolation

You can put in the result of a function into a string. This totally makes sense, but it seemed exciting at first.

```swift
func makeFavorite(categoryOfThing: String, favorite: String) -> String {
    
    return "My favorite \(categoryOfThing) is \(favorite)"
}

let categories: String = "band"
let itemInCategory: String = "The Replacements"

let sentence = makeFavorite(categoryOfThing: categories, favorite: itemInCategory)
let greeting = "Hey, Paul \(sentence)"
print(greeting)
```

### Side Effects

When a function does some kind of work that’s unrelated to a return value, like printing to the console, or making BoogieBot dance, the work is called a side effect. When you name a function, it’s good to somehow include the side effect in the name, like `leftArmUp().

### Naming with to:

I have to give this one some time. Still not quite sure why I would do this. It sets a constant inside the function.

```swift
func printHello(to: String) {
    print ("Hello " + to)
}
printHello(to: "Maya")
```

### Parameter Names and Argument Labels

This solves the previous problem by adding a parameter to the name

```swift
func printHello(to name: String) {
    print("Hello " + name)
}
printHello(to: "Chris")
printHello(to: "Johnny")
```

### The Argument Without a Name

Again, I'm having difficulty with *why* I would want to do this. I feel addle-brained from programming with PHP for too long.  I'm sure there is a reason and I look forward to writing some functions that take advantage of this.

> To declare a parameter without an argument label, you use the underscore _ where the argument label would go.

```swift
func printHelloTo(_ name: String) {
    print("Hello " + name)
}
printHelloTo("Maya")
printHelloTo("Hiro")
```





