---
layout: post
title:  "Day 18: chapter 15 structs"
date:   2020-03-21 07:00:00 -0500
categories: swift
---

Structs are simple enough at first but you can add _calculated_ variables which is really cool. I found the book's example unnecessarily convoluted. What I do like about it is that it shows the _calculated_ variable and a _method_.  Here it is.

```swift
struct Rectangle {
    let width: Int
    let height: Int
    var area: Int {
        return width * height
    }
    
    func isBiggerThan(_ rectangle: Rectangle) -> Bool {
        let areaOne = area
        let areaTwo = rectangle.width * rectangle.height
        return areaOne > areaTwo
    }
}

let rectangle = Rectangle(width: 10, height: 10)
let otherRectangle = Rectangle(width: 10, height: 20)

rectangle.isBiggerThan(otherRectangle)
otherRectangle.isBiggerThan(rectangle)

```
## Another example 

```swift
struct Concertina {
    let manufacturer: String
    let keyboardSystem: String
    let buttons: Int
    let costAsDouble: Double
    let isOnLoan: Bool
    
}

// Create an array of concertinas
var concertinas: [Concertina] = []

concertinas.append(Concertina(manufacturer: "Thomas", keyboardSystem: "Wheatstone", buttons: 30, costAsDouble: 5500.00, isOnLoan: false));
concertinas.append(Concertina(manufacturer: "Edgley", keyboardSystem: "Wheatstone", buttons: 30, costAsDouble: 2200.50, isOnLoan: true))

for concertina in concertinas {
    print("Concertina manufacturers: " + concertina.manufacturer)
}

/*
 Concertina manufacturer: Thomas
 Concertina manufacturer: Edgley
*/

// This way creates a new instance of the Concertina struct
let newConcertina = ("Thomas", "Wheatstone",30, 5500.00, false)
print(newConcertina)
// ("Thomas", "Wheatstone", 30, 5500.0, false)

let oldConcertina = ("Edgely", "Wheatstone", 30, 2200.50, true)
print(newConcertina.3)
// 5500.0


```

